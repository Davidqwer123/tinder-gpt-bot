from lib2to3.fixes.fix_input import context
from turtle import update


from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters,CallbackQueryHandler

from gpt import *
from util import *

# —Ç—É—Ç –±—É–¥–µ–º–æ –ø–∏—Å–∞—Ç–∏ –Ω–∞—à –∫–æ–¥ :)
TOKEN="8278463323:AAG1hwpYQONOSv1ASRL06YXVoW50-fBQGQs"

OPEN_AI_TOKEN = "javcgk/s3WVH1V/3/eY+dOWWa+jvSy1lakmEGDVwq1h8XG3bvDbbBufJJRs/pGrIDgVhny5Qag1p3K8y+oGQU63QPq/fboIxvJ4mWTNtgIoURRvFdbWYXH1labl8JDmWT3NzSRnQIdxjFkbVj3g8fT19j15aM3UaKZYyeEcjXr01VSj3XHOhnumhEb+6+T71NKnk7rSZF/y42jb6LiZcPWoa5CqlyR0o6kXRXqzr7DWNDuQEQ"

async def start(update,context):
    # await send_photo(update, context, "avatar_main")
    # await send_text(update,context, "–ü—Ä–∏–≤—ñ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á")
    msg = load_message("main")
    await send_photo(update,context, "main")
    await send_text(update,context,msg)
    await show_main_menu(update,context,{
        "start" : "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
        "profile": "–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è Tinder-–ø—Ä–æ—Ñ—ñ–ª—é \uD83D\uDE0E",
        "opener": "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∑–Ω–∞–π–æ–º—Å—Ç–≤–∞ \uD83E\uDD70",
        "message": "–ü–µ—Ä–µ–ø–∏—Å–∫–∞ –≤—ñ–¥ —ñ–Ω—à–æ–≥–æ —ñ–º–µ–Ω—ñ \uD83D\uDE08",
        "date": "–°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ –∑—ñ—Ä–∫–∞–º–∏ \uD83D\uDD25",
        "gpt": "–ó–∞–¥–∞—Ç–∏ –ó–∞–ø–∏—Ç–∞–Ω–Ω—è ChatGPT \uD83E\uDDE0",
    })

async def gpt(update, context):
    dialog.mode="gpt"
    await send_photo(update,context, "gpt")
    msg = load_message("gpt")
    await send_text(update,context,msg)

async def gpt_dialog(update,context):
    text = update.message.text
    promt = load_prompt("gpt")
    answer = await chatgpt.send_question(promt, text)
    await send_text(update,context,answer)


async def date(update,context):
    dialog.mode = "date"
    msg = load_message("date")
    await send_photo(update,context, "date")
    await send_text_buttons(update,context,msg,{
        "date_grande" : "–ê—Ä—ñ–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ",
        "date_robbie": "–ú–∞—Ä–≥–æ –†–æ–±–±—ñ",
        "date_zendaya": "–ó–µ–Ω–¥–µ—è",
        "date_gosling": "–†–∞—è–Ω –ì–æ—Å–ª—ñ–Ω–≥",
        "date_hardy": "–¢–æ–º –ì–∞—Ä–¥—ñ",

    })

async def date_button(update,context):
    query = update.callback_query.data
    await update.callback_query.answer()
    await send_photo(update,context,query)
    await send_text(update,context,"–ì–∞—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.\uD83D\uDE05 –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—ñ–≤—á–∏–Ω—É/—Ö–ª–æ–ø—Ü—è –Ω–∞ –ø–æ–±–∞—á–µ–Ω–Ω—è –∑–∞ 5 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\uEE0F")
    prompt = load_prompt(query)
    chatgpt.set_prompt(prompt)

async def date_dialog(update,context):
    text = update.message.text
    my_message = await send_text(update, context, "–î—Ä—É–∫—É—î.....")
    answer =  await chatgpt.add_message(text)
    await my_message.edit_text(answer)


async def message(update,context):
    dialog.mode = "message"
    msg = load_message("message")
    await send_photo(update,context, "message")
    await send_text_buttons(update,context,msg,{
        "message_next" : "–ù–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
        "message_date" : "–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –Ω–∞ –ø–æ–±–∞—á–µ–Ω–Ω—è"
    })
    dialog.list.clear()


async def message_dialog(update,comtext):
    text = update.message.text
    dialog.list.append(text)


async def message_button(update,context):
    query = update.callback_query.data
    await update.callback_query.answer()

    prompt = load_prompt(query)
    user_chat_history = '\n\n'.join(dialog.list)

    my_message = await send_text(update,context, "–î—É–º–∞—é –Ω–∞–¥ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏....")
    answer = await chatgpt.send_question(prompt,user_chat_history)
    await my_message.edit_text(answer)


async def profile(update,context):
    dialog.mode = "profile"
    msg = load_message("profile")
    await send_photo(update, context, "profile")
    await send_text(update, context, msg)
    dialog.user.clear()
    dialog.counter = 0
    await send_text(update,context, "–°–∫—ñ–ª—å–∫–∏ –≤–∞–º —Ä–æ–∫—ñ–≤?")


async  def profile_dialog(update,context):
    text = update.message.text
    dialog.counter += 1

    if dialog.counter ==1:
        dialog.user["age"] = text
        await send_text(update, context, "–ö–∏–º –≤–∏ –ø—Ä–∞—Ü—é—î—Ç–µ?")
    if dialog.counter ==2:
        dialog.user["occupation"] = text
        await send_text(update, context, "–£ –≤–∞—Å —î —Ö–æ–±—ñ?")
    if dialog.counter ==3:
        dialog.user["hobby"] = text
        await send_text(update, context, "–©–æ –≤–∞–º –Ω–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è –≤ –ª—é–¥—è—Ö?")
    if dialog.counter ==4:
        dialog.user["annoys"] = text
        await send_text(update, context, "–ú–µ—Ç–∞ –∑–Ω–∞–π–æ–º—Å—Ç–≤–∞?")
    if dialog.counter ==5:
        dialog.user["goals"] = text
        prompt = load_prompt("profile")
        user_info = dialog_user_info_to_str(dialog.user)

        my_message = await send_text(update,context,"ChatGPT üß† –≥–µ–Ω–µ—Ä—É—î –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å. –ó–∞—á–µ–∫–∞–π—Ç–µ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥.")
        answer = await chatgpt.send_question(prompt,user_info)
        await my_message.edit_text(answer)

async def opener(update,context):
    dialog.mode = "opener"
    msg = load_message("opener")
    await send_photo(update, context, "opener")
    await send_text(update, context, msg)

    dialog.user.clear()
    dialog.counter = 0
    await send_text(update, context, "–Ü–º'—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞?")

async def  opener_dialog(update,context):
    text = update.message.text
    dialog.counter += 1

    if dialog.counter == 1:
        dialog.user["name"] = text
        await send_text(update, context, "–°–∫—ñ–ª—å–∫–∏ —Ä–æ–∫—ñ–≤ –ø–∞—Ä—Ç–Ω–µ—Ä—É?")
    if dialog.counter == 2:
        dialog.user["age"] = text
        await send_text(update, context, "–û—Ü—ñ–Ω—ñ—Ç—å –∑–æ–≤–Ω—ñ—à–Ω—ñ—Å—Ç—å: 1-10 –±–∞–ª—ñ–≤?")
    if dialog.counter == 3:
        dialog.user["handsome"] = text
        await send_text(update, context, "–ö–∏–º –ø—Ä–∞—Ü—é—î?")
    if dialog.counter == 4:
        dialog.user["occupation"] = text
        await send_text(update, context, "–ú–µ—Ç–∞ –∑–Ω–∞–π–æ–º—Å—Ç–≤–∞?")
    if dialog.counter == 5:
        dialog.user["goals"] = text

        prompt = load_prompt("opener")
        user_info = dialog_user_info_to_str(dialog.user)

        my_message = await send_text(update, context, "ChatGPT üß† –≥–µ–Ω–µ—Ä—É—î –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è......")
        answer = await chatgpt.send_question(prompt, user_info)
        await my_message.edit_text(answer)

async def hello(update, context):
    if dialog.mode == "gpt":
        await gpt_dialog(update,context)

    elif dialog.mode=="date":
        await date_dialog(update,context)

    elif dialog.mode == "message":
        await message_dialog(update,context)

    elif dialog.mode == "profile":
        await profile_dialog(update,context)

    elif dialog.mode == "opener":
        await opener_dialog(update,context)


# async def buttons_handler(update,context):
#     query = update.callback_query.data
#     if query=="start":
#         await send_text(update,context,"Started!")
#     elif query =="stop":
#         await send_text(update,context,"Stopped!")

dialog = Dialog()
dialog.mode = None
dialog.list = []
dialog.user ={}
dialog.counter = 0


chatgpt = ChatGptService(token=OPEN_AI_TOKEN)

app = ApplicationBuilder().token("8278463323:AAG1hwpYQONOSv1ASRL06YXVoW50-fBQGQs").build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("gpt", gpt))
app.add_handler(CommandHandler("date", date))
app.add_handler(CommandHandler("message", message))
app.add_handler(CommandHandler("profile", profile))
app.add_handler(CommandHandler("opener", opener))




app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, hello))
app.add_handler(CallbackQueryHandler(date_button, pattern="date_.*"))
app.add_handler(CallbackQueryHandler(message_button, pattern="message_.*"))

app.run_polling()
